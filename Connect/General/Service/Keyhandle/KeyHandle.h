//
//  KeyHandle.h
//  BitMainWallet_Hot
//
//  Created by xunianqiang on 15-1-15.
//  Copyright (c) 2015年 xunianqiang. All rights reserved.
//

#import <Foundation/Foundation.h>
#import <CoreGraphics/CoreGraphics.h>

@class GcmData;

@interface KeyHandle : NSObject

@property (nonatomic,strong) NSString *privKeyStr;
@property (nonatomic,strong) NSString *pubKeyStr;
@property (nonatomic,strong) NSString *addressStr;

+(instancetype)defautKey;

//Create a new private key
+(NSString *)creatNewPrivkey;

//data turn hexstring
+ (NSString *)hexStringFromData:(NSData *)myD;

+ (NSData *)hexStringToData:(NSString *)hex;

+ (NSString *)getRawPrivkey:(NSString *)privkey;

// Create a new private key
+(NSString *)creatNewPrivkeyByRandomStr:(NSString *)randomStr;

// Get the public key through the private key
+(NSString *)createPubkeyByPrikey:(NSString *)prikey;

// A method of obtaining an address from a private key
+(NSString *)getAddressByPrivKey:(NSString *)prvkey;

// Get the address through the public key
+(NSString *)getAddressByPubkey:(NSString *)pubkey;

// Generate random numbers
+(NSData *)createRandom512bits;

+(NSString *)getMaxRandomWithGesture:(NSString *)gestureStr andSysRandomStr:(NSString *)sysRandomStr;

+(NSString *)getSHA256WithString:(NSString *)string;


+ (NSDictionary *)decodePrikeyGetDict:(NSString *) encodeStr withPassword:(NSString *)password;


/**
   * Encrypt private key
   *
   * @param privkey user private key
   * @param user_id ID of the 8-bit byte generated by the user ID server
   * @param password user password
   *
   * @return
 */
+(NSString *)getEncodePrikey:(NSString *)privkey withBitAddress :(NSString *) bitAddress password:(NSString *)password;
/**
   * Local decryption
   *
   * @param encodeStr Encryption string
   * @param password user password
   *
   * @return true and false
 */
+(BOOL)decodePrikey:(NSString *) encodeStr withPassword:(NSString *)password;

/**
 * Check the legitimacy of the private key
 *
 */
+(BOOL) checkPrivkey:(NSString *)privkey;
/**
 *  Check the legitimacy of the address
 *
 */
+(BOOL) checkAddress:(NSString *)address;

+ (NSString *)getHash256:(NSString *)string;

+ (NSString *)getHash256Byte:(NSData *)string;

#pragma mark -ECC
/**
 *  ECC Encryption Elliptic Curve Encryption Algorithm
 */
+(NSString *)ECC_EncryptWithPrivkey:(NSString *)privkey_ Pubkey:(NSString *)pubkey_ InputStr:(NSString *)inputStr_;

/**
 *  ECC decryption
 */
+(NSString *)ECC_DecryptWithPrivkey:(NSString *)privkey_ Pubkey:(NSString *)pubkey_ InputEncryptStr:(NSString *)inputEncryptStr_;



/**
 *  ECDH shared key generation
 */

+ (NSString *)getECDHkeyUsePrivkey:(NSString *)privkey PublicKey:(NSString *)pubkey;


+ (NSString *)ORXWithAstring:(NSString *)astr Bstring:(NSString *)bstr;

+ (NSString *)cdxtalkPBKDF2HMACSHA512Password:(NSString *)pwd salt:(NSString *) salt;

#pragma mark AES encryption and decryption functions

+ (NSDictionary *)xtalkEncodeAES_GCM:(NSString *)password data:(NSString *)dataStr aad:(NSString *)add iv:(NSString *) iv;
+ (NSDictionary *)xtalkEncodeAES_GCM:(NSString *)password withNSdata:(NSData *)data aad:(NSString *)aad iv:(NSString *) iv;
+ (NSString *)xtalkDecodeAES_GCM:(NSString *)password data:(NSString *)dataStr aad:(NSString *)add iv:(NSString *) iv tag:(NSString *)tagin;

+ (NSString *)xtalkEncodeAES:(NSString *)password data:(NSString *)dataStr;
+ (NSString *)xtalkDecodeAES:(NSString *)password data:(NSString *)dataStr;

+ (NSData *)xtalkDecodeAES_GCMWithPassword:(NSString *)password data:(NSString *)dataStr aad:(NSString *)aad iv:(NSString *) iv tag:(NSString *)tagin;

#pragma mark - Signature verification signature function
+ (NSString *)signHashWithPrivkey:(NSString *)privkey data:(NSString *)data;
+ (BOOL)verifyWithPublicKey:(NSString *)publicKey originData:(NSString *)data signData:(NSString *)signData;

+ (BOOL)verfyWithPublicKey:(NSString *)pub signData:(NSString *)signData;


#pragma mark - Obtain the private key via the encryption string and password
+(NSString *)getUserIDWithEncodePrivkey:(NSString *) encodeStr withPassword:(NSString *)password;

+(NSString *)getPrikeyWithEncodePrivkey:(NSString *) encodeStr withPassword:(NSString *)password;


+ (NSString *)getBtcPrivKeyFromRawPrivKey:(NSString *)rawPrivkey;

+ (NSString *)getPassByPrikey:(NSString *)prikey;

#pragma mark - wallet
+ (void)testSignTransfer;

/**
   * Packaged transactions
   *
   * @param tvsArray [{\ "vout \": 0, \ "txid \": \ "21" \ " "\" ScriptPubKey \ ": \" 76a9142dafb30480fa55f1cc7c817023c55ebc301ee50588ac \ "}]; txid \": \ "21f120603e30db800d9b8aeae3fbfc910052fc532a57d1b057eb08489275352e \", \ "scriptPubKey \": \ "76a9142dafb30480fa55f1cc7c817023c55ebc301ee50588ac \"}];
   * @param output {\ "15AZtS7D1SRt35KDQdzv96tGU2wCfqMjQq \": 0.0005, \ "16SymaJKNozkcG7K9eQhGKhyjnaHGBEY3u \": 0.0008, \ "18ms9eXC61cEkFSkpAZk8RzreBGGETFUuC \": 0.0002}
   * @param serverFee fee
 */
+ (NSString *)packTransactionWithTvsArray:(NSArray *)tvsArray outputs:(NSDictionary *)outputs privkeys:(NSArray *)privkeys serverFee:(double)serverFee;


/**
     Signature trading
   *
   * @param tvsArray
   * @param privkeys
   * @param rawTranscation
   *
   * @return
 */
+ (NSString *)signRawTranscationWithTvsArray:(NSArray *)tvsArray privkeys:(NSArray *)privkeys rawTranscation:(NSString *)rawTranscation;

/**
   * Create the original transaction
   *
   * @param tvsArray
   * @param
 *
 *  @return 
 */
+ (NSString *)createRawTranscationWithTvsArray:(NSArray *)tvsArray outputs:(NSDictionary *)outputs;



#pragma mark - Encryption decryption method
+ (GcmData *)xtalkEncodeAES_GCMWithPassword:(NSData *)password data:(NSData *)data aad:(NSData *)aad;
+ (NSDictionary *)xtalkEncodeAES_GCMWithPassword:(NSData *)password originData:(NSData *)data aad:(NSData *)aad;
+ (NSData *)getECDHkeyWithPrivkey:(NSString *)privkey publicKey:(NSString *)pubkey;
+ (NSData *)getAes256KeyByECDHKeyAndSalt:(NSData *)password salt:(NSData *)salt;
+ (NSData *)xtalkDecodeAES_GCMDataWithPassword:(NSData *)password data:(NSData *)data aad:(NSData *)aad iv:(NSData *)iv tag:(NSData *)tag;
@end
